{
  "excludeFiles": [
    "node_modules/**",
    "coverage/**"
  ],
  "exnext": true,
  "verbose": true,

  "disallowAnonymousFunctions": false, //Requires that a function expression be named.
  "disallowCapitalizedComments": false, //Requires the first alphabetical character of a comment to be lowercase.
  "disallowCommaBeforeLineBreak": false, //Disallows commas as last token on a line in lists.
  "disallowCurlyBraces": false, //Disallows curly braces after statements.
  "disallowDanglingUnderscores": false, //Disallows identifiers that start or end in _. Some popular identifiers are automatically listed as exceptions:
  "disallowEmptyBlocks": false, //Disallows empty blocks (except for catch blocks).
  "disallowFunctionDeclarations": false, //Disallows function declarations.
  "disallowIdentifierNames": false, //Disallows a specified set of identifier names.
  "disallowImplicitTypeConversion": false, //Disallows implicit type conversion.
  "disallowKeywordsInComments": false, //Disallows keywords in your comments, such as TODO or FIXME
  "disallowKeywordsOnNewLine": false, //Disallows placing keywords on a new line.
  "disallowKeywords": false, //Disallows usage of specified keywords.
  "disallowMixedSpacesAndTabs": false, //Requires lines to not contain both spaces and tabs consecutively, or spaces after tabs only for alignment if \"smart\"
  "disallowMultipleLineBreaks": false, //Disallows multiple blank lines in a row.
  "disallowMultipleLineStrings": false, //Disallows strings that span multiple lines without using concatenation.
  "disallowMultipleSpaces": false, //Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token
  "disallowMultipleVarDecl": false, //Disallows multiple var declaration (except for-loop).
  "disallowNamedUnassignedFunctions": false, //Disallows unassigned functions to be named inline
  "disallowNewlineBeforeBlockStatements": false, //Disallows newline before opening curly brace of all block statements.
  "disallowNotOperatorsInConditionals": false, //Disallows the not, not equals, and strict not equals operators in conditionals.
  "disallowOperatorBeforeLineBreak": false, //Requires putting certain operators on the next line rather than on the current line before a line break.
  "disallowPaddingNewLinesAfterBlocks": false, //Disallow a newline after blocks
  "disallowPaddingNewLinesAfterUseStrict": false, //Disallow a blank line after 'use strict'; statements
  "disallowPaddingNewLinesBeforeExport": false, //Disallows newline before module.exports
  "disallowPaddingNewlinesBeforeKeywords": false, //Disallow an empty line above the specified keywords.
  "disallowPaddingNewLinesBeforeLineComments": false, //Disallows newline before line comments
  "disallowPaddingNewlinesInBlocks": false, //Disallows blocks from beginning or ending with 2 newlines.
  "disallowPaddingNewLinesInObjects": false, //Disallows newline inside curly braces of all objects.
  "disallowQuotedKeysInObjects": false, //Disallows quoted keys in object if possible.
  "disallowSemicolons": false, //Disallows lines from ending in a semicolon.
  "disallowSpaceAfterBinaryOperators": false, //Requires sticking binary operators to the right.
  "disallowSpaceAfterKeywords": false, //Disallows space after keyword.
  "disallowSpaceAfterLineComment": false, //Requires that a line comment (//) not be followed by a space.
  "disallowSpaceAfterObjectKeys": false, //Disallows space after object keys.
  "disallowSpaceAfterPrefixUnaryOperators": false, //Requires sticking unary operators to the right.
  "disallowSpaceBeforeBinaryOperators": false, //Requires sticking binary operators to the left.
  "disallowSpaceBeforeBlockStatements": false, //Disallows space before block statements (for loops, control structures).
  "disallowSpaceBeforeKeywords": false, //Disallows space before keyword.
  "disallowSpaceBeforeObjectValues": false, //Disallows space after object keys.
  "disallowSpaceBeforePostfixUnaryOperators": false, //Requires sticking unary operators to the left.
  "disallowSpaceBetweenArguments": false, //Ensure there are no spaces after argument separators in call expressions.
  "disallowSpacesInAnonymousFunctionExpression": false, //Disallows space before () or {} in anonymous function expressions.
  "disallowSpacesInCallExpression": false, //Disallows space before () in call expressions.
  "disallowSpacesInConditionalExpression": false, //Disallows space before and/or after ? or : in conditional expressions.
  "disallowSpacesInForStatement": false, //Disallow spaces in between for statement.
  "disallowSpacesInFunctionDeclaration": false, //Disallows space before () or {} in function declarations.
  "disallowSpacesInFunctionExpression": false, //Disallows space before () or {} in function expressions (both named and anonymous).
  "disallowSpacesInFunction": false, //Expression
  "disallowSpacesInNamedFunctionExpression": false, //Disallows space before () or {} in named function expressions.
  "disallowSpacesInsideArrayBrackets": false, //Disallows space after opening array square bracket and before closing.
  "disallowSpacesInsideBrackets": false, //Disallows space after opening square bracket and before closing.
  "disallowSpacesInsideObjectBrackets": false, //Disallows space after opening object curly brace and before closing.
  "disallowSpacesInsideParentheses": false, //Disallows space after opening round bracket and before closing.
  "disallowTrailingComma": false, //Disallows an extra comma following the final element of an array or object literal.
  "disallowTrailingWhitespace": false, //Requires all lines to end on a non-whitespace character
  "disallowYodaConditions": false, //Requires the variable to be the left hand operator when doing a boolean comparison
  "maximumLineLength": false, //Requires all lines to be at most the number of characters specified
  "maximumNumberOfLines": false, //Requires the file to be at most the number of lines specified
  "requireAlignedObjectValues": false, //Requires proper alignment in object literals.
  "requireAnonymousFunctions": false, //Requires that a function expression be anonymous.
  "requireBlocksOnNewline": false, //Requires blocks to begin and end with a newline
  "requireCamelCaseOrUpperCaseIdentifiers": false, //Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES
  "requireCapitalizedComments": false, //Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.
  "requireCapitalizedConstructors": false, //Requires constructors to be capitalized (except for this)
  "requireCommaBeforeLineBreak": false, //Requires commas as last token on a line in lists.
  "requireCurlyBraces": false, //Requires curly braces after statements.
  "requireDollarBeforejQueryAssignment": false, //Require a $ before variable names that are jquery assignments.
  "requireDotNotation": false, //Requires member expressions to use dot notation when possible
  "requireFunctionDeclarations": false, //Requires function declarations by disallowing assignment of functions expressions to variables. Function expressions are allowed in all other contexts, including when passed as function arguments or immediately invoked.
  "requireKeywordsOnNewLine": false, //Requires placing keywords on a new line.
  "requireLineBreakAfterVariableAssignment": false, //Requires placing line feed after assigning a variable.
  "requireLineFeedAtFileEnd": false, //Requires placing line feed at file end.
  "requireMultipleVarDecl": false, //Requires multiple var declaration.
  "requireNamedUnassignedFunctions": false, //Require unassigned functions to be named inline
  "requireNewlineBeforeBlockStatements": false, //Requires newline before opening curly brace of all block statements.
  "requireOperatorBeforeLineBreak": false, //Requires operators to appear before line breaks and not after.
  "requirePaddingNewLineAfterVariableDeclaration": false, //Requires an extra blank newline after var declarations, as long as it is not the last expression in the current block.
  "requirePaddingNewLinesAfterBlocks": false, //Requires newline after blocks
  "requirePaddingNewLinesAfterUseStrict": false, //Requires a blank line after 'use strict'; statements
  "requirePaddingNewLinesBeforeExport": false, //Requires newline before module.exports
  "requirePaddingNewlinesBeforeKeywords": false, //Requires an empty line above the specified keywords unless the keyword is the first expression in a block.
  "requirePaddingNewLinesBeforeLineComments": false, //Requires newline before line comments
  "requirePaddingNewlinesInBlocks": false, //Requires blocks to begin and end with 2 newlines
  "requirePaddingNewLinesInObjects": false, //Requires newline inside curly braces of all objects.
  "requireParenthesesAroundIIFE": false, //Requires parentheses around immediately invoked function expressions.
  "requireQuotedKeysInObjects": false, //Requires quoted keys in objects.
  "requireSemicolons": false, //Requires semicolon after:
  "requireSpaceAfterBinaryOperators": false, //Disallows sticking binary operators to the right.
  "requireSpaceAfterKeywords": false, //Requires space after keyword.
  "requireSpaceAfterLineComment": false, //Requires that a line comment (//) be followed by a space.
  "requireSpaceAfterObjectKeys": false, //Requires space after object keys.
  "requireSpaceAfterPrefixUnaryOperators": false, //Disallows sticking unary operators to the right.
  "requireSpaceBeforeBinaryOperators": false, //Disallows sticking binary operators to the left.
  "requireSpaceBeforeBlockStatements": false, //Requires space(s) before block statements (for loops, control structures).
  "requireSpaceBeforeKeywords": false, //Requires space before keyword.
  "requireSpaceBeforeObjectValues": false, //Requires space after object keys.
  "requireSpaceBeforePostfixUnaryOperators": false, //Disallows sticking unary operators to the left.
  "requireSpaceBetweenArguments": false, //Ensure there are spaces after argument separators in call expressions.
  "requireSpacesInAnonymousFunctionExpression": false, //Requires space before () or {} in anonymous function expressions.
  "requireSpacesInCallExpression": false, //Requires space before () in call expressions.
  "requireSpacesInConditionalExpression": false, //Requires space before and/or after ? or : in conditional expressions.
  "requireSpacesInForStatement": false, //Requires spaces inbetween for statement.
  "requireSpacesInFunctionDeclaration": false, //Requires space before () or {} in function declarations.
  "requireSpacesInFunctionExpression": false, //Requires space before () or {} in function expressions (both named and anonymous).
  "requireSpacesInFunction": false, //Expression
  "requireSpacesInNamedFunctionExpression": false, //Requires space before () or {} in named function expressions.
  "requireSpacesInsideArrayBrackets": false, //Requires space after opening array square bracket and before closing.
  "requireSpacesInsideBrackets": false, //Requires space after opening square bracket and before closing.
  "requireSpacesInsideObjectBrackets": false, //Requires space after opening object curly brace and before closing.
  "requireSpacesInsideParentheses": false, //Requires space after opening round bracket and before closing.
  "requireTrailingComma": false, //Requires an extra comma following the final element of an array or object literal.
  "requireYodaConditions": false, //Requires the variable to be the right hand operator when doing a boolean comparison
  "safeContextKeyword": false, //Option to check var that = this expressions
  "validateAlignedFunctionParameters": false, //Validates proper alignment of function parameters.
  "validateIndentation": false, //Validates indentation for switch statements and block statements
  "validateLineBreaks": false, //Option to check line break characters
  "validateNewlineAfterArrayElements": false, //Requires each element in array on a single line when array length is more than passed maximum number or array fills more than one line. Set ignoreBrackets to true to allow elements on the same line with brackets.
  "validateParameterSeparator": false, //Enable validation of separators between function parameters. Will ignore newlines.
  "validateQuoteMarks": false, //Requires all quote marks to be either the supplied value, or consistent if true
}
